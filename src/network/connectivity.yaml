heat_template_version: 2015-10-15
description: >
  This template is a wrapper for a common setup used in almost every
  stack. It creates a router, connects to a public network and allocates
  fip_count floating IPs on that network.

parameter_groups:

parameters:

  name:
    type: string
    description: Name of the router
    constraints:
      - allowed_pattern: "[a-z][a-z0-9-]{1,}"

  public_network:
    type: string
    description: The public network to connect to
    constraints:
      - custom_constraint: neutron.network

  fip_count:
    type: number
    description: The number of floating IPs to allocate
    default: 1
    constraints:
      - range: { min: 0 }

resources:

  router:
    type: OS::Neutron::Router
    properties:
      name:
        list_join: ['-', [{ get_param: name }, 'router']]
      external_gateway_info:
        network: { get_param: public_network }

  fips:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: fip_count }
      resource_def:
        type: OS::Neutron::FloatingIP
        properties:
          floating_network: { get_param: public_network }

outputs:

  router:
    value: { get_resource: router }

  fips:
    value: { get_attr: [fips, refs] }

  fip_addresses:
    value: { get_attr: [fips, floating_ip_address] }
