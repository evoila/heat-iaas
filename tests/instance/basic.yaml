heat_template_version: 2015-10-15
description: Basic Instance

parameter_groups:

parameters:

  key:
    type: string
    constraints:
      - custom_constraint: nova.keypair

  image:
    type: string
    constraints:
      - custom_constraint: glance.image

  flavor:
    type: string
    constraints:
      - custom_constraint: nova.flavor

  public_network:
    type: string
    constraints:
      - custom_constraint: neutron.network

  dns_nameservers:
    type: comma_delimited_list
    description: List of DNS servers
    default:
      - 8.8.8.8

resources:

  ###### SETUP ######

  network1:
    type: OS::Neutron::Net
    properties:
      name: test-network1

  subnet1:
    type: OS::Neutron::Subnet
    properties:
      name: test-subnet1
      network_id: { get_resource: network1 }
      cidr: 192.168.0.0/24
      dns_nameservers: { get_param: dns_nameservers }

  network2:
    type: OS::Neutron::Net
    properties:
      name: test-network2

  subnet2:
    type: OS::Neutron::Subnet
    properties:
      name: test-subnet2
      network_id: { get_resource: network2 }
      cidr: 192.168.1.0/24
      dns_nameservers: { get_param: dns_nameservers }

  router:
    type: OS::Neutron::Router
    properties:
      name: router
      external_gateway_info:
        network: { get_param: public_network }

  router_interface1:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet1 }

  router_interface2:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet2 }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: test-security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0

  script1:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash
        echo "Configuration 1"

  script2:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash
        echo "Configuration 2"

  script3:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/bash
            echo "Testing wait_condition"
            for I in {1..10}; do echo $I && sleep 1; done
            wc_notify --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }

  config:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: script1 }
        - config: { get_resource: script2 }
        - config: { get_resource: script3 }

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 120

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  ###### TESTS ######

  instance-basic:
    type: Lib::Instance::Basic
    properties:
      name: instance-basic
      key: { get_param: key }
      image: { get_param: image }
      flavor: { get_param: flavor }
      subnets:
        - { get_resource: subnet1 }
      security_groups:
        - default
        - { get_resource: security_group }
      config: { get_resource: config }
    depends_on:
      - network1
      - subnet1
      - security_group

  instance-multi-homed:
    type: Lib::Instance::Basic
    properties:
      name: instance-multi-homed
      key: { get_param: key }
      image: { get_param: image }
      flavor: { get_param: flavor }
      subnets:
        - { get_resource: subnet1 }
        - { get_resource: subnet2 }
      security_groups:
        - default
        - { get_resource: security_group }
      config: { get_resource: config }
    depends_on:
      - network1
      - network2
      - subnet1
      - subnet2
      - security_group

  instance-no-config:
    type: Lib::Instance::Basic
    properties:
      name: node-no-config
      key: { get_param: key }
      image: { get_param: image }
      flavor: { get_param: flavor }
      subnets:
        - { get_resource: subnet1 }
      security_groups:
        - default
        - { get_resource: security_group }
      config: None
    depends_on:
      - network1
      - subnet1
      - security_group

  instance-with-wait-condition:
    type: Lib::Instance::Basic
    properties:
      name: instance-with-wait-condition
      key: { get_param: key }
      image: { get_param: image }
      flavor: { get_param: flavor }
      subnets:
        - { get_resource: subnet1 }
      security_groups:
        - default
        - { get_resource: security_group }
      config: { get_resource: config }
    depends_on:
      - network1
      - subnet1
      - security_group

  instance-with-volume:
    type: Lib::Instance::Basic
    properties:
      name: instance-with-volume
      key: { get_param: key }
      image: { get_param: image }
      flavor: { get_param: flavor }
      subnets:
        - { get_resource: subnet1 }
      security_groups:
        - default
        - { get_resource: security_group }
      config: { get_resource: config }
      extras:
        volume_count: 2
        volume_size: 1
    depends_on:
      - network1
      - subnet1
      - security_group

outputs:

  id:
    value: { get_resource: instance-basic }

  accessIPv4:
    value: { get_attr: [instance-basic, accessIPv4] }

  accessIPv6:
    value: { get_attr: [instance-basic, accessIPv6] }

  addresses:
    value: { get_attr: [instance-basic, addresses] }

  console_urls:
    value: { get_attr: [instance-basic, console_urls] }

  first_address:
    value: { get_attr: [instance-basic, first_address] }

  instance_name:
    value: { get_attr: [instance-basic, instance_name] }

  name:
    value: { get_attr: [instance-basic, name] }

  networks:
    value: { get_attr: [instance-basic, networks] }

  show:
    value: { get_attr: [instance-basic, show] }
